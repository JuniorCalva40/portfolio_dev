---
// Astro component
---

<div class="relative h-full w-full p-4" id="container">
	<div class="absolute h-full w-full inset-0 z-0 bg-transparent flex items-center justify-center">
		<div class="glow-effect"></div>
		<canvas id="particles-canvas" class="absolute h-full w-full"></canvas>
	</div>
	<div class="relative z-10">
		<slot />
	</div>
</div>

<style>
	.glow-effect {
		position: absolute;
		border-radius: 50%;
		width: 300px;
		height: 300px;
		background: radial-gradient(
			rgba(63, 65, 233, 0.661),
			rgba(135, 21, 206, 0.531),
			rgba(135, 21, 206, 0.113)
		);
		filter: blur(40px);
		animation: pulse 4s ease-in-out infinite;
	}

	@keyframes pulse {
		0%,
		100% {
			transform: scale(1);
			opacity: 0.8;
		}
		50% {
			transform: scale(0.9);
			filter: blur(50px);
			opacity: 1;
		}
	}

	#particles-canvas {
		pointer-events: none;
	}
</style>

<script>
	class Particle {
		x: number
		y: number
		vx: number
		vy: number
		size: number
		opacity: number

		constructor(canvas: HTMLCanvasElement) {
			this.x = Math.random() * canvas.width
			this.y = Math.random() * canvas.height
			this.vx = (Math.random() - 0.5) * 1.5
			this.vy = (Math.random() - 0.5) * 1.5
			this.size = Math.random() * 2 + 1
			this.opacity = Math.random() * 0.5 + 0.2
		}

		update(canvas: HTMLCanvasElement) {
			// Movimiento simple
			this.x += this.vx
			this.y += this.vy

			// Mantener part√≠culas dentro del canvas
			if (this.x < 0) this.x = canvas.width
			if (this.x > canvas.width) this.x = 0
			if (this.y < 0) this.y = canvas.height
			if (this.y > canvas.height) this.y = 0
		}

		draw(ctx: CanvasRenderingContext2D) {
			ctx.beginPath()
			ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2)
			ctx.fillStyle = `rgba(99, 102, 241, ${this.opacity})`
			ctx.fill()
		}
	}

	function initParticles() {
		const canvas = document.getElementById('particles-canvas') as HTMLCanvasElement
		const ctx = canvas.getContext('2d')
		if (!ctx) return

		const particles: Particle[] = []
		const particleCount = 150

		function resizeCanvas() {
			if (!ctx) return
			const dpr = window.devicePixelRatio || 1
			const rect = canvas.getBoundingClientRect()
			canvas.width = rect.width * dpr
			canvas.height = rect.height * dpr
			ctx.scale(dpr, dpr)
			canvas.style.width = `${rect.width}px`
			canvas.style.height = `${rect.height}px`
		}

		function animate() {
			if (!ctx) return

			ctx.clearRect(0, 0, canvas.width, canvas.height)
			ctx.fillStyle = 'rgba(0, 0, 0, 0)'
			ctx.fillRect(0, 0, canvas.width, canvas.height)

			particles.forEach((particle) => {
				particle.update(canvas)
				particle.draw(ctx)
			})

			requestAnimationFrame(animate)
		}

		resizeCanvas()
		window.addEventListener('resize', resizeCanvas)

		for (let i = 0; i < particleCount; i++) {
			particles.push(new Particle(canvas))
		}

		animate()
	}

	document.addEventListener('DOMContentLoaded', initParticles)
</script>
