---

---

<canvas class="bg-secondary absolute top-0 w-full h-full" id="vortexAnimation"> </canvas>

<script>
	document.addEventListener('astro:page-load', () => {
		class Particle {
			canvas: HTMLCanvasElement
			ctx: CanvasRenderingContext2D
			x: number = 0
			y: number = 0
			vx: number = 0
			vy: number = 0
			life: number = 0
			ttl: number = 0
			speed: number = 0
			radius: number = 0
			color: string = ''

			constructor(canvas: HTMLCanvasElement) {
				this.canvas = canvas
				const context = canvas.getContext('2d')
				if (context) {
					this.ctx = context
				} else {
					throw new Error('2D context not supported or canvas already initialized')
				}
				this.reset()
			}

			reset() {
				this.x = Math.random() * this.canvas.width
				this.y = Math.random() * this.canvas.height
				this.vx = this.vy = 0
				this.life = 0
				this.ttl = 50 + Math.random() * 200
				this.speed = 0.3 + Math.random() * 2
				this.radius = 1 + Math.random() * 3
				this.color = Math.random() > 0.5 ? '#952bff' : '#7000ff'
			}

			update(center: [number, number]) {
				const angle = Math.atan2(this.y - center[1], this.x - center[0])
				this.vx = 0.5 * Math.cos(angle)
				this.vy = 0.5 * Math.sin(angle)
				this.x += this.vx * this.speed
				this.y += this.vy * this.speed
				this.life++

				if (this.life > this.ttl - 20) this.speed *= 0.5
				if (this.life > this.ttl || this.outOfBounds()) this.reset()
			}

			outOfBounds() {
				return this.x < 0 || this.x > this.canvas.width || this.y < 0 || this.y > this.canvas.height
			}

			draw() {
				this.ctx.beginPath()
				this.ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2)
				this.ctx.fillStyle = this.color
				this.ctx.fill()
			}
		}

		class Circle {
			canvas: HTMLCanvasElement
			ctx: CanvasRenderingContext2D | null
			x: number
			y: number
			radius: number

			constructor(canvas: HTMLCanvasElement, x: number, y: number, radius: number) {
				this.canvas = canvas
				this.canvas = canvas
				this.ctx = canvas.getContext('2d')
				this.x = x
				this.y = y
				this.radius = radius
			}

			draw() {
				if (this.ctx) {
					const gradient = this.ctx.createRadialGradient(
						this.x,
						this.y,
						20,
						this.x,
						this.y,
						this.radius
					)
					gradient.addColorStop(0.2, 'black')
					gradient.addColorStop(1, '#482bff')

					this.ctx.save()
					this.ctx.filter = 'blur(90px)'
					this.ctx.beginPath()
					this.ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2)
					this.ctx.fillStyle = gradient
					this.ctx.fill()
					this.ctx.restore()
				}
			}
		}

		function initVortex() {
			const canvas = document.getElementById('vortexAnimation') as HTMLCanvasElement
			const ctx = canvas.getContext('2d')

			function resizeCanvas() {
				canvas.width = window.innerWidth
				canvas.height = window.innerHeight
			}

			resizeCanvas()
			window.addEventListener('resize', resizeCanvas)

			const center: [number, number] = [canvas.width / 2, canvas.height / 2]
			const particles = Array.from({ length: 150 }, () => new Particle(canvas))
			const circle = new Circle(canvas, center[0], center[1], 200)

			function animate() {
				if (ctx) {
					ctx.clearRect(0, 0, canvas.width, canvas.height)
					circle.draw()
					particles.forEach((p) => {
						p.update(center)
						p.draw()
					})
				}
				requestAnimationFrame(animate)
			}

			animate()
		}

		initVortex()
	})
</script>
