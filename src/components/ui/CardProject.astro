---
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import Button from './Button.astro'
import { getLangFromUrl, useTranslations } from '../../i18n/utils'
import type { SkillName } from '../../types/project'
import TechBadge from '../sections/TechBadge.astro'

interface Props {
	img: ImageMetadata
	title: string
	description: string
	techStack: SkillName[]
	class?: string
	link: string
	link_source?: string
}
const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)

const { class: className, img, title, description, techStack, link, link_source } = Astro.props
---

<article class:list={['project-card rounded-md relative  ', className]}>
	<figure class="imageContainer">
		<Image
			class={'rounded-md h-full w-full object-cover object-top sm:object-center'}
			src={img}
			alt={title}
		/>
		<div>
			<Button id={`open-dialog-${title}`} class="absolute right-12 -bottom-1" variant="gradient"
				>{t('projects.card.info')}</Button
			>

			<button class="absolute -bottom-2 -right-1 z-10 rounded-full p-1 bg-secondary">
				<div
					class="bg-gradient-to-r from-accent to-primary p-2 hover:opacity-90 duration-100 transition ease-in-out rounded-full"
				>
					<Icon name={'ui/arrow-up-right'} size={20} color={'white'} />
				</div>
			</button>
		</div>

		<p class="text-muted text-base absolute z-10 left-3 bottom-0">{title}</p>
	</figure>

	<dialog
		id={`dialog-${title}`}
		class="w-full md:w-7/12 h-1/2 fixed rounded-md p-4 top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2"
	>
		<div class="grid grid-cols-12 h-full gap-4">
			<Icon name={'ui/x-circle'} size={25} class="absolute top-2 right-2 cursor-pointer" />
			<div class="hidden md:flex flex-col gap-2 col-span-4">
				<Image src={img} alt={title} class="w-72 h-72 rounded-md object-cover object-top" />
			</div>
			<div class="flex flex-col gap-2 col-span-12 md:col-span-8">
				<h2 class="text-white text-2xl font-bold">{title}</h2>
				<Image src={img} alt={title} class="w-full md:hidden rounded-md object-cover object-top" />
				<p class="text-muted text-sm">{description}</p>
				<ul class="flex flex-wrap gap-2 my-2">
					{techStack.map((tech) => <TechBadge name={tech} />)}
				</ul>
				<div class="flex gap-2 my-2">
					<Button variant="gradient">
						<a href={link} target="_blank" rel="noopener noreferrer" class="flex items-center">
							<Icon name={'ui/arrow-up-right'} class="inline" size={20} color={'white'} />
							<span class="text-white ml-2">Preview</span>
						</a>
					</Button>
					{
						link_source && (
							<Button variant="solid">
								<a href={link} target="_blank" rel="noopener noreferrer" class="flex items-center">
									<Icon name={'logos/github'} class="inline" size={20} color={'white'} />
									<span class="text-white ml-2">{t('projects.card.source')}</span>
								</a>
							</Button>
						)
					}
				</div>
			</div>
		</div>
	</dialog>

	<script>
		document.addEventListener('astro:page-load', () => {
			const buttons = document.querySelectorAll('[id^="open-dialog-"]')

			buttons.forEach((button) => {
				const dialogId = button.id.replace('open-dialog-', 'dialog-')
				const dialog = document.getElementById(dialogId) as HTMLDialogElement
				const closeButton = dialog.querySelector('svg') as SVGElement

				button.addEventListener('click', () => {
					dialog.showModal()
					document.body.style.overflow = 'hidden'
				})

				closeButton.addEventListener('click', () => {
					dialog.close()
					document.body.style.overflow = 'auto'
				})

				dialog.addEventListener('click', (e) => {
					const dialogDimensions = dialog.getBoundingClientRect()
					if (
						e.clientX < dialogDimensions.left ||
						e.clientX > dialogDimensions.right ||
						e.clientY < dialogDimensions.top ||
						e.clientY > dialogDimensions.bottom
					) {
						dialog.close()
						document.body.style.overflow = 'auto'
					}
				})
			})
		})
	</script>

	<style>
		.project-card {
			display: flex;
			flex-direction: column;
			justify-content: space-between;
		}

		.scrollbar-none::-webkit-scrollbar {
			display: none;
		}

		.imageContainer {
			width: 100%;
			height: 100%;
			position: relative;
			display: flex;
		}

		.imageContainer::after {
			content: '';
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background: rgb(2, 0, 36);
			background: linear-gradient(
				0deg,
				rgb(2, 0, 36) 0%,
				rgba(0, 0, 0, 0.452) 30%,
				rgba(255, 255, 255, 0.027) 100%
			);
			pointer-events: none;
		}

		dialog {
			background: linear-gradient(to bottom right, rgba(124, 58, 237, 0.05), rgba(0, 0, 0, 0.2));
			border: 1px solid rgba(255, 255, 255, 0.1);
			color: white;
			backdrop-filter: blur(18px);
			opacity: 0;
			transition: opacity 0.3s ease;
		}

		dialog[open] {
			opacity: 1;
			animation: show 0.3s ease forwards;
		}

		dialog::backdrop {
			background: rgba(0, 0, 0, 0.514);
			opacity: 0;
			transition: opacity 0.3s ease;
		}

		dialog[open]::backdrop {
			opacity: 1;
		}

		@keyframes show {
			from {
				transform: translate(-50%, -48%) scale(0.95);
			}
			to {
				transform: translate(-50%, -50%) scale(1);
			}
		}
	</style>
</article>
